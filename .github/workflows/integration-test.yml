name: "Integration Test"

on:
  push:
    branches:
      - main
      - ampere-test
  pull_request:
    paths:
      - '.github/workflows/integration-test.yml'
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'tests/**'
      - 'Makefile'
      - 'Makefile.common'
      - 'go.mod'
      - 'go.sum'
      - '!**.md'
      - '!internal/buildscripts/**'

concurrency:
  group: integration-test-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.19.6"
  GOTESPLIT_TOTAL: "10"
  IMAGE_TAG: ${{ github.run_id }}

jobs:
  docker-otelcol:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ${{ matrix.RUNNER }}
    strategy:
      matrix:
        include:
          - RUNNER: ubuntu-20.04
            ARCH: amd64
          - RUNNER: ampere
            ARCH: arm64
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'
      - uses: actions/cache@v3
        with:
          path: .cache/buildx/agent-bundle-${{ matrix.ARCH }}
          key: agent-bundle-buildx-${{ matrix.ARCH }}-${{ hashFiles('pkg/signalfx-agent/bundle/**') }}
      - run: |
          make docker-otelcol ARCH=${{ matrix.ARCH }} IMAGE_TAG=${{ env.IMAGE_TAG }}
        env:
          DOCKER_BUILDKIT: '1'
      - run: docker save -o ./bin/image.tar otelcol:${{ env.IMAGE_TAG }}
      - uses: actions/upload-artifact@v3
        with:
          name: otelcol-${{ matrix.ARCH }}
          path: ./bin

  integration-vet-amd64:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ubuntu-20.04
    needs: [docker-otelcol]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'
      - uses: actions/download-artifact@v3
        with:
          name: otelcol-amd64
          path: ./bin
      - run: docker load -i ./bin/image.tar
      - run: chmod a+x ./bin/*
      - run: make integration-vet
        env:
          SPLUNK_OTEL_COLLECTOR_IMAGE: otelcol:${{ env.IMAGE_TAG }}

  integration-test-amd64:
    # Use 20.04.5 until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/16450 is resolved
    runs-on: ubuntu-20.04
    needs: [integration-vet-amd64]
    strategy:
      matrix:
        GOTESPLIT_INDEX: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'
      - uses: actions/download-artifact@v3
        with:
          name: otelcol-amd64
          path: ./bin
      - uses: docker/setup-qemu-action@v2
        if: ${{ runner.arch != 'X64' }}
        with:
          platforms: amd64,arm64
      - run: docker load -i ./bin/image.tar
      - run: chmod a+x ./bin/*
      - run: make integration-test-split
        env:
          SPLUNK_OTEL_COLLECTOR_IMAGE: otelcol:${{ env.IMAGE_TAG }}
          GOTESPLIT_TOTAL: "${{ env.GOTESPLIT_TOTAL }}"
          GOTESPLIT_INDEX: "${{ matrix.GOTESPLIT_INDEX }}"

  # Need to run tests serially and block concurrent jobs since we're running on a single host.
  integration-test-arm64:
    runs-on: ampere
    needs: [docker-otelcol]
    concurrency: integration-test-arm64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'
      - uses: actions/download-artifact@v3
        with:
          name: otelcol-arm64
          path: ./bin
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64
      - run: docker load -i ./bin/image.tar
      - run: chmod a+x ./bin/*
      - run: make integration-test
        env:
          SPLUNK_OTEL_COLLECTOR_IMAGE: otelcol:${{ env.IMAGE_TAG }}
