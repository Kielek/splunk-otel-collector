name: auto-instrumentation

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - '.github/workflows/auto-instrumentation.yml'
      - 'instrumentation/**'
      - 'internal/buildscripts/packaging/tests/instrumentation/**'

concurrency:
  group: auto-instrumentation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  PIP_VERSION: '22.0.4'
  REQUIREMENTS_PATH: "internal/buildscripts/packaging/tests/requirements.txt"
  GO_VERSION: 1.19.6

jobs:
  otelcol:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        SYS_BINARIES: [ "binaries-linux_amd64", "binaries-linux_arm64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'

      - name: Build Collector
        run: |
          make ${{ matrix.SYS_BINARIES }}

      - name: Uploading binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.SYS_BINARIES }}
          path: |
            ./bin/*

  build-package:
    name: build-package
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        SYS_PACKAGE: [ "deb", "rpm" ]
        ARCH: [ "amd64", "arm64"]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build ${{ matrix.SYS_PACKAGE }} ${{ matrix.ARCH }} package
        run: |
          gitRef=(${GITHUB_REF//// })
          if [[ "${gitRef[1]}" = "tags" ]] ;
          then
            echo "TAG_NAME=${gitRef[2]}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=" >> $GITHUB_ENV
          fi
          make -C instrumentation ${{ matrix.SYS_PACKAGE }}-package VERSION="${TAG_NAME:-}" ARCH="${{ matrix.ARCH }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: splunk-otel-auto-instrumentation-${{ matrix.ARCH }}-${{ matrix.SYS_PACKAGE }}
          path: ./instrumentation/dist/splunk-otel-auto-instrumentation*.${{ matrix.SYS_PACKAGE }}

  test-package-matrix:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Get matrix
        id: get-matrix
        run: |
          # create test matrix for distro and arch
          dockerfiles=$(find internal/buildscripts/packaging/tests/instrumentation/images/ -name "Dockerfile.*" | cut -d '.' -f2- | sort -u)
          if [ -z "$dockerfiles" ]; then
            echo "Failed to get dockerfiles from internal/buildscripts/packaging/tests/instrumentation/images!" >&2
            exit 1
          fi
          distro=$(for d in $dockerfiles; do echo -n "\"$d\","; done)
          arch="\"amd64\", \"arm64\""
          matrix="{\"DISTRO\": [${distro%,}], \"ARCH\": [${arch}]}"
          echo "$matrix" | jq
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

  test-package:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [otelcol, build-package, test-package-matrix]
    strategy:
      matrix: ${{ fromJSON(needs.test-package-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Get package type for ${{ matrix.DISTRO }}
        run: |
          for pkg in "deb" "rpm"; do
            if [[ -f "internal/buildscripts/packaging/tests/instrumentation/images/${pkg}/Dockerfile.${{ matrix.DISTRO }}" ]]; then
              echo "SYS_PACKAGE=${pkg}" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "Unknown distro '${{ matrix.DISTRO }}'!"
          exit 1

      - uses: actions/download-artifact@v3
        with:
          name: binaries-linux_${{ matrix.ARCH }}
          path: ./bin

      - uses: actions/download-artifact@v3
        with:
          name: splunk-otel-auto-instrumentation-${{ matrix.ARCH }}-${{ env.SYS_PACKAGE }}
          path: ./instrumentation/dist

      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.ARCH != 'amd64' }}
        with:
          platforms: ${{ matrix.ARCH }}
          image: tonistiigi/binfmt:qemu-v7.0.0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.REQUIREMENTS_PATH }}

      - name: Install pytest
        run: |
          if which pip; then
              pip install --upgrade 'pip==${{ env.PIP_VERSION }}'
          else
              curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
              python get-pip.py 'pip==${{ env.PIP_VERSION }}'
          fi
          pip install -r "${{ env.REQUIREMENTS_PATH }}"

      - name: Test ${{ env.SYS_PACKAGE }} on ${{ matrix.DISTRO }} ${{ matrix.ARCH }}
        env:
          DOCKER_BUILDKIT: '1'
        run: |
          pytest -sx --verbose -k "${{ matrix.DISTRO }} and ${{ matrix.ARCH }}" \
            internal/buildscripts/packaging/tests/instrumentation/instrumentation_test.py
